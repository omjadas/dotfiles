#!/usr/bin/env bash

set -e

rust-components () {
    rustup default stable
    rustup toolchain install nightly
    rustup component add rls
    cargo install cargo-cache cargo-criterion cargo-expand cargo-geiger \
        cargo-make cargo-udeps cargo-update cargo-workspaces when-cli
}

rust () {
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    rust-components
}

gh-extensions () {
    gh extension install mislav/gh-branch
    gh extension install hashue/gh-fuzzyclone
}

gh-auth () {
    if [[ -z "$HEADLESS" ]]; then
        gh auth login
        gh-extensions
    fi

    if [[ -n "$GITHUB_TOKEN" ]]; then
        echo "$GITHUB_TOKEN" | gh auth login --with-token
        gh-extensions
    fi
}

cd "$HOME"
yadm submodule update --recursive --init
mkdir -p "$HOME/.local/bin"
mkdir -p "$HOME/.local/share/zsh"

SYSTEM_TYPE=$(uname -s)

# Linux specific config
if [[ "$SYSTEM_TYPE" = "Linux" ]]; then
    if command -v pacman >/dev/null 2>&1; then
        echo "Updating packages"
        sudo pacman -Syu --noconfirm

        echo "Installing packages"
        sudo pacman -S --needed --noconfirm ansible aurpublish autopep8 \
            base-devel bat bat-extras bmon cabal-install cargo-audit \
            cargo-edit cargo-flamegraph cargo-outdated cargo-tarpaulin \
            cargo-watch clang diesel-cli difftastic direnv dlang-dmd dog \
            dos2unix dotnet-sdk dust eksctl exa fd firefox fzf ghc ghc-static \
            git git-absorb git-delta github-cli git-lfs go grex helix helm \
            helmfile hexyl hyperfine iftop inetutils jdk-openjdk jq kompose \
            kotlin kubectl kubectx llvm lsb-release lshw lsof man-db maven \
            minikube miniserve mold moreutils mosh namcap neofetch nmap \
            nodejs npm openmpi openssh p7zip pacman-contrib pandoc plantuml \
            procs python python-j2cli python-pip python-pipenv python-rope \
            python-pylint pygmentize pyenv rclone ripgrep rmlint rsync ruby \
            ruby-irb rustup sd shfmt stack starship tcpdump termshark \
            terraform tokei units unzip up valgrind vifm vim wabt \
            wireshark-qt wget xdg-utils xh xonsh yadm youtube-dl zellij zip \
            zoxide zsh zsh-completions

        rust-components

        sudo sd "^PKGEXT='[^']+'$" "PKGEXT='.pkg.tar'" /etc/makepkg.conf
        sudo sd "^SRCEXT='[^']+'$" "SRCEXT='.src.tar'" /etc/makepkg.conf

        if ! command -v yay >/dev/null 2>&1; then
            echo "Installing yay"
            git clone https://aur.archlinux.org/yay.git
            cd yay
            makepkg -si --needed --noconfirm
            cd ..
            rm -rf yay
        fi

        yay -S --needed --noconfirm amazon-ec2-instance-selector-bin atool \
            aws-cli-v2-bin aws-iam-authenticator-bin azure-cli browsh-bin \
            fnm-bin git-trim-bin go-jira-bin googler google-cloud-sdk \
            gotop-bin grpcurl-bin hadolint-bin k6-bin kube-score-bin \
            kubeval-bin krew-bin neovim-nightly-bin rustscan watchman-bin yay

        if [[ -z "$HEADLESS" ]]; then
            yay -S --needed --noconfirm android-studio google-chrome \
                google-chrome-beta google-chrome-dev postman-bin \
                visual-studio-code-bin
        fi

        gh-auth

        TOOLCHAINS=$(rustup toolchain list | rg '^1\.' | sd '\n' ' ')

        if [[ -n "$TOOLCHAINS" ]]; then
            rustup toolchain uninstall $TOOLCHAINS
        fi
    elif command -v apt >/dev/null 2>&1; then
        echo "Updating packages"
        sudo apt update && sudo apt dist-upgrade

        echo "Installing packages"
        sudo apt install atool bat build-essential clang default-jdk direnv \
            fasd git haskell-platform httpie jq llvm lsb-release moreutils \
            mosh neofetch neovim nodejs npm p7zip-full pandoc plantuml \
            pylint3 python3-autopep8 python3 python3-pygments python3-rope \
            ripgrep rmlint rsync ruby unzip vifm vim xonsh zip zsh
        rust

        ln -s /usr/bin/batcat "$HOME/.local/bin/bat"
    elif command -v dnf >/dev/null 2>&1; then
        echo "Updating packages"
        sudo dnf upgrade
        rust
    fi

    # WSL specific config
    if [[ "$(uname -r)" =~ (m|M)icrosoft && -d "/mnt/c/Users/omjadas/.ssh" ]]; then
        rm -rf "$HOME/.ssh"
        ln -s /mnt/c/Users/omjadas/.ssh "$HOME"
        sudo npm install -g wsl-open
    fi

    echo "Installing global NPM packages"

    sudo npm install -g @google/clasp commitizen cz-conventional-changelog \
        eslint heroku nodemon ts-node typescript
# macOS specific config
elif [[ "$SYSTEM_TYPE" = "Darwin" ]]; then
    if ! command -v brew >/dev/null 2>&1; then
        echo "Installing homebrew"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    fi

    if [[ -f "$HOME/.Brewfile" ]]; then
        echo "Updating homebrew bundle"
        brew bundle --global
    fi

    rust-components
    cargo install cargo-edit cargo-outdated

    gh-auth
fi

sudo chsh -s /usr/bin/zsh "$(whoami)"

if [[ $- == *i* ]]; then
    vim -c "PlugClean | PlugUpdate | qa"
    nvim -c "PlugClean | PlugUpdate | qa"
fi
