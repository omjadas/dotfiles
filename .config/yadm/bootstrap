#!/usr/bin/env bash

rust-components () {
    rustup set profile complete
    rustup toolchain install stable
    rustup toolchain install nightly
    rustup default stable
    rustup component add clippy rls rust-analysis rust-src rustfmt
    cargo install cargo-audit cargo-edit cargo-make cargo-outdated \
        cargo-udeps cargo-update cargo-watch diesel_cli
}

rust () {
    curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
    rust-components
}

cd "$HOME"
yadm submodule update --recursive --init
mkdir -p "$HOME/.local/bin"

SYSTEM_TYPE=$(uname -s)

# Linux specific config
if [[ "$SYSTEM_TYPE" = "Linux" ]]; then
    if command -v pacman >/dev/null 2>&1; then
        echo "Updating packages"
        sudo pacman -Syu

        echo "Installing packages"
        sudo pacman -S ansible atool aurpublish autopep8 base-devel bat bmon \
            cabal-install clang dlang-dmd dos2unix dotnet-sdk dust eksctl exa \
            fd fzf ghc ghc-static git git-delta github-cli git-lfs go helm \
            helmfile hexyl httpie hyperfine iftop inetutils jdk-openjdk jq \
            kotlin kubectl kubectx ldns llvm lsb-release lshw lsof man-db \
            maven minikube moreutils mysql namcap neofetch nmap nodejs npm \
            openmpi openssh p7zip pacman-contrib pandoc plantuml postgresql \
            procs python python-pip python-pipenv python-rope python-pylint \
            pygmentize pyenv rclone ripgrep rmlint rsync ruby ruby-irb rustup \
            sd shfmt sqlite stack starship tcpdump termshark terraform tmux \
            tokei units unzip vifm vim wabt wireshark-qt wget xdg-utils xonsh \
            youtube-dl zip zoxide zsh zsh-completions
        rustup default stable
        rust-components

        if ! command -v yay >/dev/null 2>&1; then
            echo "Installing yay"
            git clone https://aur.archlinux.org/yay.git
            cd yay
            makepkg -si
            cd ..
            rm -rf yay
        fi

        yay -S amazon-ec2-instance-selector-bin aws-cli-v2-bin \
            aws-iam-authenticator-bin azure-cli bat-extras-git browsh-bin \
            direnv go-jira-bin googler google-cloud-sdk gotop-bin grex \
            hadolint-bin k6-bin kompose-bin kube-score-bin kubeval-bin \
            krew-bin mosh-git neovim-nightly-bin ngrok rustscan tmuxinator \
            up-bin watchman yadm yay yq2-bin
    elif command -v apt >/dev/null 2>&1; then
        echo "Updating packages"
        sudo apt update && sudo apt dist-upgrade

        echo "Installing packages"
        sudo apt install atool bat build-essential clang default-jdk direnv \
            fasd git haskell-platform httpie jq llvm lsb-release moreutils \
            mosh neofetch neovim nodejs npm p7zip-full pandoc plantuml \
            pylint3 python3-autopep8 python3 python3-pygments python3-rope \
            ripgrep rmlint rsync ruby tmux unzip vifm vim xonsh zip zsh
        rust

        ln -s /usr/bin/batcat "$HOME/.local/bin/bat"
    elif command -v dnf >/dev/null 2>&1; then
        echo "Updating packages"
        sudo dnf upgrade
        rust
    fi

    # WSL specific config
    if [[ "$(uname -r)" =~ (m|M)icrosoft ]]; then
        ln -s /mnt/c/Users/omjadas/.ssh "$HOME"
        sudo npm install -g wsl-open
    fi

    sudo npm install -g @google/clasp commitizen cz-conventional-changelog \
        eslint heroku nodemon ts-node typescript
    pip install --user j2cli togglCli
# macOS specific config
elif [[ "$SYSTEM_TYPE" = "Darwin" ]]; then
    if ! command -v brew >/dev/null 2>&1; then
        echo "Installing homebrew"
        /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)"
    fi

    if [[ -f "$HOME/.Brewfile" ]]; then
        echo "Updating homebrew bundle"
        brew bundle --global
    fi
fi

vim -c "PlugClean | PlugUpdate | qa"
nvim -c "PlugClean | PlugUpdate | qa"
